# Exit interrupt handler
# This is done by writing to 0x41 to [mmio_region]
.load 0x40000
.exit_handler
    movi r1 0x41
    movi r2 0x2000
    st r1 r2 0x0
.end_section

# Gets current clock-count by writing 0x42 to [mmio_region]
.load 0x20000
.rdtsc
    movi r1 0x42
    movi r2 0x2000
    st r1 r2 0x0
    ret
.end_section

# Gets current random number by writing 0x43 to [mmio_region]
.load 0x21000
.get_rand_num
    movi r1 0x43
    movi r2 0x2000
    st r1 r2 0x0
    ret
.end_section

.load 0x22000
.init_interrupts
    # Register exit_handler by writing its address 
    # to interrupt-vector[0]
    lui r1 0x40
    st r1 r0 0x0

    ret
.end_section

.load 0x23000
.print_arr_written
    # Write `Done writing array to 0x093cdc` to vga-screen
    movi r1 0x1000

    # 'Do'
    movi r2 0x6f44
    sth r2 r1 0x0

    # 'ne'
    movi r2 0x656e
    sth r2 r1 0x2

    # ' w'
    movi r2 0x7720
    sth r2 r1 0x4

    # 'ri'
    movi r2 0x6972
    sth r2 r1 0x6

    # 'ti'
    movi r2 0x6974
    sth r2 r1 0x8

    # 'ng'
    movi r2 0x676e
    sth r2 r1 0xa

    # ' a'
    movi r2 0x6120
    sth r2 r1 0xc

    # 'rr'
    movi r2 0x7272
    sth r2 r1 0xe

    # 'ay'
    movi r2 0x7961
    sth r2 r1 0x10

    # ' t'
    movi r2 0x7420
    sth r2 r1 0x12

    # 'o '
    movi r2 0x206f
    sth r2 r1 0x14

    # '0x'
    movi r2 0x7830
    sth r2 r1 0x16

    # '09'
    movi r2 0x3930
    sth r2 r1 0x18

    # '2f'
    movi r2 0x6632
    sth r2 r1 0x1a

    # 'fc'
    movi r2 0x6366
    sth r2 r1 0x1c

    ret
.end_section

.load 0x24000
.print_arr_sorted
    # Write `Done sorting array` to vga-screen
    movi r1 0x1000

    # 'Do'
    movi r2 0x6f44
    sth r2 r1 0x32

    # 'ne'
    movi r2 0x656e
    sth r2 r1 0x34

    # ' s'
    movi r2 0x7320
    sth r2 r1 0x36

    # 'or'
    movi r2 0x726f
    sth r2 r1 0x38

    # 'ti'
    movi r2 0x6974
    sth r2 r1 0x3a

    # 'ng'
    movi r2 0x676e
    sth r2 r1 0x3c

    # ' a'
    movi r2 0x6120
    sth r2 r1 0x3e

    # 'rr'
    movi r2 0x7272
    sth r2 r1 0x40

    # 'ay'
    movi r2 0x7961
    sth r2 r1 0x42

    # '!'
    movi r2 0x21
    stb r2 r1 0x44

    ret
.end_section

.load 0x25000
.sort
    # r1 = length
    # r2 = array
    # r4 = i
    movi r4 0x0

    # r9 = shift-value
    movi r9 0x2

    # r5 = len - 2
    subi r5 r1 0x2

    # r11 = array
    mov r11 r2
.outer_top
    # for i in 0..(len-2)
    bgt r4 r5 .outer_end

    # j = 0
    movi r6 0x0

    # r7 = len - 2 - i
    sub r7 r5 r4
.inner_top
    # if j > (len-2-i) { break; }
    bgt r6 r7 .inner_end

    addi r8 r6 0x1

    # r2 = [r11 + (r6 * 4)]
    shl r6 r6 r9
    add r12 r11 r6
    ld r2 r12 0x0

    # r3 = [r11 + (r8 * 4)]
    shl r8 r8 r9
    add r12 r11 r8
    ld r3 r12 0x0

    # if r2 < r3 swapping r2 & r3 not required, so skip }
    blt r2 r3 .skip

    # [r11 + (r8 * 4)] = r2
    add r12 r11 r8
    st r2 r12 0x0

    # [r11 + (r6 * 4)] = r3
    add r12 r11 r6
    st r3 r12 0x0
.skip
    # Reset shifts made to to loads
    shr r6 r6 r9
    shr r8 r8 r9

    addi r6 r6 0x1
    jmpr .inner_top
.inner_end
    addi r4 r4 0x1
    jmpr .outer_top
.outer_end
    ret
.end_section

# Entry-point
.load 0x10000
._start
    # Call .init_interrupts to initialize interrupt-vector
    call 0x22000
    
    # r13 = base-pointer
    mov r13 r15

    # Make 400 bytes of room on stack for 1024 4-byte entries
    subi r15 r15 0x1000

    # r12 is the array-base
    mov r12 r15

    # Counter variable
    movi r4 0x0

    # Loop-bounds-check
    movi r5 0x1000

.loop_start
    # r2 = rand()
    call 0x21000
    mov r2 r1

    # [r12 + r4] = r2
    add r6 r12 r4
    st r2 r6 0x0

    # Increment counter and branch to start of loop if required
    addi r4 r4 4
    blt r4 r5 .loop_start

    # Print write-completion message
    call 0x23000

    # r1 = arr-len
    # r2 = arr-ptr
    # Invoke sorting routine
    movi r1 0x400
    mov r2 r12
    call 0x25000

    # Print sort-completion message
    call 0x24000

    # Exit-routine
    addi r15 r15 0x1000
    int0
.end_section
